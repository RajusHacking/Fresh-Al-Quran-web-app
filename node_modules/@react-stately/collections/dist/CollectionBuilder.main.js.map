{"mappings":";;;;;;;;;;;;AAAA;;;;;;;;;;CAUC;AAUM,MAAM;IAIX,MAAM,KAAwB,EAAE,OAAiB,EAAE;QACjD,IAAI,CAAC,OAAO,GAAG;QACf,OAAO,+BAAS,IAAM,IAAI,CAAC,iBAAiB,CAAC;IAC/C;IAEA,CAAS,kBAAkB,KAAwB,EAAE;QACnD,IAAI,YAAC,QAAQ,SAAE,KAAK,EAAC,GAAG;QAExB,IAAI,OAAO,aAAa,YAAY;YAClC,IAAI,CAAC,OACH,MAAM,IAAI,MAAM;YAGlB,KAAK,IAAI,QAAQ,MAAM,KAAK,CAC1B,OAAO,IAAI,CAAC,WAAW,CAAC;gBACtB,OAAO;YACT,GAAG;gBAAC,UAAU;YAAQ;QAE1B,OAAO;YACL,IAAI,QAAgC,EAAE;YACtC,CAAA,GAAA,sCAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAA;gBAC/B,MAAM,IAAI,CAAC;YACb;YAEA,IAAI,QAAQ;YACZ,KAAK,IAAI,QAAQ,MAAO;gBACtB,IAAI,QAAQ,IAAI,CAAC,WAAW,CAAC;oBAC3B,SAAS;oBACT,OAAO;gBACT,GAAG,CAAC;gBAEJ,KAAK,IAAI,QAAQ,MAAO;oBACtB;oBACA,MAAM;gBACR;YACF;QACF;IACF;IAEQ,OAAO,IAA0B,EAAE,WAA2B,EAAE,KAA6B,EAAE,SAAe,EAAO;QAC3H,IAAI,KAAK,GAAG,IAAI,MACd,OAAO,KAAK,GAAG;QAGjB,IAAI,YAAY,IAAI,KAAK,UAAU,YAAY,GAAG,IAAI,MACpD,OAAO,CAAC,EAAE,UAAU,EAAE,YAAY,GAAG,CAAC,CAAC;QAGzC,IAAI,IAAI,YAAY,KAAK;QACzB,IAAI,KAAK,MAAM;gBACH;YAAV,IAAI,MAAM,CAAA,SAAA,EAAE,GAAG,cAAL,oBAAA,SAAS,EAAE,EAAE;YACvB,IAAI,OAAO,MACT,MAAM,IAAI,MAAM;YAGlB,OAAO;QACT;QAEA,OAAO,YAAY,CAAC,EAAE,UAAU,CAAC,EAAE,YAAY,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,YAAY,KAAK,CAAC,CAAC;IACnF;IAEQ,cAAc,KAA6B,EAAE,WAA2B,EAAE;QAChF,OAAO;YACL,UAAU,YAAY,QAAQ,IAAI,MAAM,QAAQ;QAClD;IACF;IAEA,CAAS,YAAY,WAA2B,EAAE,KAA6B,EAAE,SAAe,EAAE,UAAoB,EAAsB;QAC1I,qGAAqG;QACrG,6CAA6C;QAC7C,IAAI,UAAU,YAAY,OAAO;QACjC,IAAI,CAAC,WAAW,YAAY,KAAK,IAAI,SAAS,MAAM,QAAQ,EAAE;YAC5D,IAAI,SAAS,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,KAAK;YAC7C,IAAI,UAAW,CAAA,CAAC,OAAO,gBAAgB,IAAI,CAAC,OAAO,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAA,GAAI;gBAClF,OAAO,KAAK,GAAG,YAAY,KAAK;gBAChC,OAAO,SAAS,GAAG,aAAa,WAAW,GAAG,GAAG;gBACjD,MAAM;gBACN;YACF;YAEA,UAAU,MAAM,QAAQ,CAAC,YAAY,KAAK;QAC5C;QAEA,wGAAwG;QACxG,0FAA0F;QAC1F,IAAI,CAAA,GAAA,sCAAI,EAAE,cAAc,CAAC,UAAU;YACjC,IAAI,OAAO,QAAQ,IAAI;YACvB,IAAI,OAAO,SAAS,cAAc,OAAO,KAAK,iBAAiB,KAAK,YAAY;gBAC9E,IAAI,OAAO,OAAO,QAAQ,IAAI,KAAK,aAAa,QAAQ,IAAI,CAAC,IAAI,GAAG,QAAQ,IAAI;gBAChF,MAAM,IAAI,MAAM,CAAC,iBAAiB,EAAE,KAAK,gBAAgB,CAAC;YAC5D;YAEA,IAAI,aAAa,KAAK,iBAAiB,CAAC,QAAQ,KAAK,EAAE,IAAI,CAAC,OAAO;YACnE,IAAI,QAAQ,YAAY,KAAK;YAC7B,IAAI,SAAS,WAAW,IAAI;YAC5B,MAAO,CAAC,OAAO,IAAI,IAAI,OAAO,KAAK,CAAE;gBACnC,IAAI,YAAY,OAAO,KAAK;gBAE5B,YAAY,KAAK,GAAG;gBAEpB,IAAI,UAAU,UAAU,GAAG;gBAC3B,IAAI,CAAC,SACH,UAAU,UAAU,OAAO,GAAG,OAAO,IAAI,CAAC,MAAM,CAAC,SAAiC,aAAa,OAAO;gBAGxG,IAAI,QAAQ,IAAI,CAAC,WAAW,CAAC;oBAC3B,GAAG,SAAS;oBACZ,KAAK;2BACL;oBACA,SAAS,8BAAQ,YAAY,OAAO,EAAE,UAAU,OAAO;gBACzD,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,YAAY,YAAY,CAAC,EAAE,UAAU,EAAE,QAAQ,GAAG,CAAC,CAAC,GAAG,QAAQ,GAAG,EAAE;gBAEjG,IAAI,WAAW;uBAAI;iBAAM;gBACzB,KAAK,IAAI,QAAQ,SAAU;oBACzB,oCAAoC;oBACpC,KAAK,KAAK,GAAG,UAAU,KAAK,IAAI,YAAY,KAAK;oBACjD,IAAI,KAAK,KAAK,EACZ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,KAAK,EAAE;oBAG7B,6FAA6F;oBAC7F,0EAA0E;oBAC1E,IAAI,YAAY,IAAI,IAAI,KAAK,IAAI,KAAK,YAAY,IAAI,EACpD,MAAM,IAAI,MAAM,CAAC,kBAAkB,EAAE,iCAAW,KAAK,IAAI,EAAE,MAAM,EAAE,iCAAW,WAAW,IAAI,EAAE,SAAS,EAAE,iCAAW,YAAY,IAAI,EAAE,eAAe,CAAC;oBAGzJ;oBACA,MAAM;gBACR;gBAEA,SAAS,WAAW,IAAI,CAAC;YAC3B;YAEA;QACF;QAEA,0BAA0B;QAC1B,IAAI,YAAY,GAAG,IAAI,MACrB;QAGF,mBAAmB;QACnB,IAAI,UAAU,IAAI;QAClB,IAAI,OAAgB;YAClB,MAAM,YAAY,IAAI;YACtB,OAAO,YAAY,KAAK;YACxB,KAAK,YAAY,GAAG;YACpB,WAAW,aAAa,WAAW,GAAG,GAAG;YACzC,OAAO,YAAY,KAAK;YACxB,OAAO,aAAa,WAAW,KAAK,GAAG,IAAI;YAC3C,OAAO,YAAY,KAAK;YACxB,UAAU,YAAY,QAAQ;YAC9B,WAAW,YAAY,SAAS;YAChC,cAAc,WAAW,CAAC,aAAa;YACvC,SAAS,YAAY,OAAO;YAC5B,kBAAkB,YAAY,gBAAgB;YAC9C,eAAe,YAAY,aAAa;YACxC,YAAY,+BAAS;gBACnB,IAAI,CAAC,YAAY,aAAa,EAC5B;gBAGF,IAAI,QAAQ;gBACZ,KAAK,IAAI,SAAS,YAAY,UAAU,GAAI;oBAC1C,4EAA4E;oBAC5E,IAAI,MAAM,GAAG,IAAI,MACf,qFAAqF;oBACrF,6FAA6F;oBAC7F,sGAAsG;oBACtG,kCAAkC;oBAClC,MAAM,GAAG,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC;oBAGvC,MAAM,KAAK,GAAG;oBACd,IAAI,QAAQ,QAAQ,WAAW,CAAC,OAAO,QAAQ,aAAa,CAAC,OAAO,QAAQ,KAAK,GAAG,EAAE;oBACtF,KAAK,IAAI,QAAQ,MAAO;wBACtB;wBACA,MAAM;oBACR;gBACF;YACF;QACF;QAEA,MAAM;IACR;;aA1LQ,QAA6B,IAAI;;AA2L3C;AAEA,4EAA4E;AAC5E,SAAS,+BAAY,QAAyC;IAC5D,IAAI,QAAQ,EAAE;IACd,IAAI,WAAW;IACf,OAAO;QACL,CAAC,CAAC,OAAO,QAAQ,CAAC;YAChB,KAAK,IAAI,QAAQ,MACf,MAAM;YAGR,IAAI,CAAC,UACH,WAAW;YAGb,KAAK,IAAI,QAAQ,SAAU;gBACzB,MAAM,IAAI,CAAC;gBACX,MAAM;YACR;QACF;IACF;AACF;AAGA,SAAS,8BAAQ,KAAqB,EAAE,KAAqB;IAC3D,IAAI,SAAS,OACX,OAAO,CAAC,UAAY,MAAM,MAAM;IAGlC,IAAI,OACF,OAAO;IAGT,IAAI,OACF,OAAO;AAEX;AAEA,SAAS,iCAAW,GAAW;IAC7B,OAAO,GAAG,CAAC,EAAE,CAAC,WAAW,KAAK,IAAI,KAAK,CAAC;AAC1C","sources":["packages/@react-stately/collections/src/CollectionBuilder.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBase, CollectionElement, Key, Node} from '@react-types/shared';\nimport {PartialNode} from './types';\nimport React, {ReactElement} from 'react';\n\ninterface CollectionBuilderState {\n  renderer?: (value: any) => ReactElement\n}\n\nexport class CollectionBuilder<T extends object> {\n  private context?: unknown;\n  private cache: WeakMap<T, Node<T>> = new WeakMap();\n\n  build(props: CollectionBase<T>, context?: unknown) {\n    this.context = context;\n    return iterable(() => this.iterateCollection(props));\n  }\n\n  private *iterateCollection(props: CollectionBase<T>) {\n    let {children, items} = props;\n\n    if (typeof children === 'function') {\n      if (!items) {\n        throw new Error('props.children was a function but props.items is missing');\n      }\n\n      for (let item of props.items) {\n        yield* this.getFullNode({\n          value: item\n        }, {renderer: children});\n      }\n    } else {\n      let items: CollectionElement<T>[] = [];\n      React.Children.forEach(children, child => {\n        items.push(child);\n      });\n\n      let index = 0;\n      for (let item of items) {\n        let nodes = this.getFullNode({\n          element: item,\n          index: index\n        }, {});\n\n        for (let node of nodes) {\n          index++;\n          yield node;\n        }\n      }\n    }\n  }\n\n  private getKey(item: CollectionElement<T>, partialNode: PartialNode<T>, state: CollectionBuilderState, parentKey?: Key): Key {\n    if (item.key != null) {\n      return item.key;\n    }\n\n    if (partialNode.type === 'cell' && partialNode.key != null) {\n      return `${parentKey}${partialNode.key}`;\n    }\n\n    let v = partialNode.value as any;\n    if (v != null) {\n      let key = v.key ?? v.id;\n      if (key == null) {\n        throw new Error('No key found for item');\n      }\n\n      return key;\n    }\n\n    return parentKey ? `${parentKey}.${partialNode.index}` : `$.${partialNode.index}`;\n  }\n\n  private getChildState(state: CollectionBuilderState, partialNode: PartialNode<T>) {\n    return {\n      renderer: partialNode.renderer || state.renderer\n    };\n  }\n\n  private *getFullNode(partialNode: PartialNode<T>, state: CollectionBuilderState, parentKey?: Key, parentNode?: Node<T>): Generator<Node<T>> {\n    // If there's a value instead of an element on the node, and a parent renderer function is available,\n    // use it to render an element for the value.\n    let element = partialNode.element;\n    if (!element && partialNode.value && state && state.renderer) {\n      let cached = this.cache.get(partialNode.value);\n      if (cached && (!cached.shouldInvalidate || !cached.shouldInvalidate(this.context))) {\n        cached.index = partialNode.index;\n        cached.parentKey = parentNode ? parentNode.key : null;\n        yield cached;\n        return;\n      }\n\n      element = state.renderer(partialNode.value);\n    }\n\n    // If there's an element with a getCollectionNode function on its type, then it's a supported component.\n    // Call this function to get a partial node, and recursively build a full node from there.\n    if (React.isValidElement(element)) {\n      let type = element.type as any;\n      if (typeof type !== 'function' && typeof type.getCollectionNode !== 'function') {\n        let name = typeof element.type === 'function' ? element.type.name : element.type;\n        throw new Error(`Unknown element <${name}> in collection.`);\n      }\n\n      let childNodes = type.getCollectionNode(element.props, this.context) as Generator<PartialNode<T>, void, Node<T>[]>;\n      let index = partialNode.index;\n      let result = childNodes.next();\n      while (!result.done && result.value) {\n        let childNode = result.value;\n\n        partialNode.index = index;\n\n        let nodeKey = childNode.key;\n        if (!nodeKey) {\n          nodeKey = childNode.element ? null : this.getKey(element as CollectionElement<T>, partialNode, state, parentKey);\n        }\n\n        let nodes = this.getFullNode({\n          ...childNode,\n          key: nodeKey,\n          index,\n          wrapper: compose(partialNode.wrapper, childNode.wrapper)\n        }, this.getChildState(state, childNode), parentKey ? `${parentKey}${element.key}` : element.key, parentNode);\n\n        let children = [...nodes];\n        for (let node of children) {\n          // Cache the node based on its value\n          node.value = childNode.value || partialNode.value;\n          if (node.value) {\n            this.cache.set(node.value, node);\n          }\n\n          // The partial node may have specified a type for the child in order to specify a constraint.\n          // Verify that the full node that was built recursively matches this type.\n          if (partialNode.type && node.type !== partialNode.type) {\n            throw new Error(`Unsupported type <${capitalize(node.type)}> in <${capitalize(parentNode.type)}>. Only <${capitalize(partialNode.type)}> is supported.`);\n          }\n\n          index++;\n          yield node;\n        }\n\n        result = childNodes.next(children);\n      }\n\n      return;\n    }\n\n    // Ignore invalid elements\n    if (partialNode.key == null) {\n      return;\n    }\n\n    // Create full node\n    let builder = this;\n    let node: Node<T> = {\n      type: partialNode.type,\n      props: partialNode.props,\n      key: partialNode.key,\n      parentKey: parentNode ? parentNode.key : null,\n      value: partialNode.value,\n      level: parentNode ? parentNode.level + 1 : 0,\n      index: partialNode.index,\n      rendered: partialNode.rendered,\n      textValue: partialNode.textValue,\n      'aria-label': partialNode['aria-label'],\n      wrapper: partialNode.wrapper,\n      shouldInvalidate: partialNode.shouldInvalidate,\n      hasChildNodes: partialNode.hasChildNodes,\n      childNodes: iterable(function *() {\n        if (!partialNode.hasChildNodes) {\n          return;\n        }\n\n        let index = 0;\n        for (let child of partialNode.childNodes()) {\n          // Ensure child keys are globally unique by prepending the parent node's key\n          if (child.key != null) {\n            // TODO: Remove this line entirely and enforce that users always provide unique keys.\n            // Currently this line will have issues when a parent has a key `a` and a child with key `bc`\n            // but another parent has key `ab` and its child has a key `c`. The combined keys would result in both\n            // children having a key of `abc`.\n            child.key = `${node.key}${child.key}`;\n          }\n\n          child.index = index;\n          let nodes = builder.getFullNode(child, builder.getChildState(state, child), node.key, node);\n          for (let node of nodes) {\n            index++;\n            yield node;\n          }\n        }\n      })\n    };\n\n    yield node;\n  }\n}\n\n// Wraps an iterator function as an iterable object, and caches the results.\nfunction iterable<T>(iterator: () => IterableIterator<Node<T>>): Iterable<Node<T>> {\n  let cache = [];\n  let iterable = null;\n  return {\n    *[Symbol.iterator]() {\n      for (let item of cache) {\n        yield item;\n      }\n\n      if (!iterable) {\n        iterable = iterator();\n      }\n\n      for (let item of iterable) {\n        cache.push(item);\n        yield item;\n      }\n    }\n  };\n}\n\ntype Wrapper = (element: ReactElement) => ReactElement;\nfunction compose(outer: Wrapper | void, inner: Wrapper | void): Wrapper {\n  if (outer && inner) {\n    return (element) => outer(inner(element));\n  }\n\n  if (outer) {\n    return outer;\n  }\n\n  if (inner) {\n    return inner;\n  }\n}\n\nfunction capitalize(str: string) {\n  return str[0].toUpperCase() + str.slice(1);\n}\n"],"names":[],"version":3,"file":"CollectionBuilder.main.js.map"}