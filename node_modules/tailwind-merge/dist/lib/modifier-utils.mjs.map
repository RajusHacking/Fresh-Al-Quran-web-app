{"version":3,"file":"modifier-utils.mjs","sources":["../../src/lib/modifier-utils.ts"],"sourcesContent":["import { Config } from './types'\n\nexport const IMPORTANT_MODIFIER = '!'\n\nexport function createSplitModifiers(config: Config) {\n    const separator = config.separator || ':'\n\n    // splitModifiers inspired by https://github.com/tailwindlabs/tailwindcss/blob/v3.2.2/src/util/splitAtTopLevelOnly.js\n    return function splitModifiers(className: string) {\n        let bracketDepth = 0\n        let modifiers = []\n        let modifierStart = 0\n\n        for (let index = 0; index < className.length; index++) {\n            let char = className[index]\n\n            if (bracketDepth === 0 && char === separator[0]) {\n                if (\n                    separator.length === 1 ||\n                    className.slice(index, index + separator.length) === separator\n                ) {\n                    modifiers.push(className.slice(modifierStart, index))\n                    modifierStart = index + separator.length\n                }\n            }\n\n            if (char === '[') {\n                bracketDepth++\n            } else if (char === ']') {\n                bracketDepth--\n            }\n        }\n\n        const baseClassNameWithImportantModifier =\n            modifiers.length === 0 ? className : className.substring(modifierStart)\n        const hasImportantModifier =\n            baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER)\n        const baseClassName = hasImportantModifier\n            ? baseClassNameWithImportantModifier.substring(1)\n            : baseClassNameWithImportantModifier\n\n        return {\n            modifiers,\n            hasImportantModifier,\n            baseClassName,\n        }\n    }\n}\n\n/**\n * Sorts modifiers according to following schema:\n * - Predefined modifiers are sorted alphabetically\n * - When an arbitrary variant appears, it must be preserved which modifiers are before and after it\n */\nexport function sortModifiers(modifiers: string[]) {\n    if (modifiers.length <= 1) {\n        return modifiers\n    }\n\n    const sortedModifiers: string[] = []\n    let unsortedModifiers: string[] = []\n\n    modifiers.forEach((modifier) => {\n        const isArbitraryVariant = modifier[0] === '['\n\n        if (isArbitraryVariant) {\n            sortedModifiers.push(...unsortedModifiers.sort(), modifier)\n            unsortedModifiers = []\n        } else {\n            unsortedModifiers.push(modifier)\n        }\n    })\n\n    sortedModifiers.push(...unsortedModifiers.sort())\n\n    return sortedModifiers\n}\n"],"names":["IMPORTANT_MODIFIER","createSplitModifiers","config","separator","splitModifiers","className","bracketDepth","modifiers","modifierStart","index","length","char","slice","push","baseClassNameWithImportantModifier","substring","hasImportantModifier","startsWith","baseClassName","sortModifiers","sortedModifiers","unsortedModifiers","forEach","modifier","isArbitraryVariant","sort"],"mappings":"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"}