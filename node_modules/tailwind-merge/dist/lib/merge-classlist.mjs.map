{"version":3,"file":"merge-classlist.mjs","sources":["../../src/lib/merge-classlist.ts"],"sourcesContent":["import { ConfigUtils } from './config-utils'\nimport { IMPORTANT_MODIFIER, sortModifiers } from './modifier-utils'\n\nconst SPLIT_CLASSES_REGEX = /\\s+/\n\nexport function mergeClassList(classList: string, configUtils: ConfigUtils) {\n    const { splitModifiers, getClassGroupId, getConflictingClassGroupIds } = configUtils\n\n    /**\n     * Set of classGroupIds in following format:\n     * `{importantModifier}{variantModifiers}{classGroupId}`\n     * @example 'float'\n     * @example 'hover:focus:bg-color'\n     * @example 'md:!pr'\n     */\n    const classGroupsInConflict = new Set<string>()\n\n    return (\n        classList\n            .trim()\n            .split(SPLIT_CLASSES_REGEX)\n            .map((originalClassName) => {\n                const { modifiers, hasImportantModifier, baseClassName } =\n                    splitModifiers(originalClassName)\n\n                const classGroupId = getClassGroupId(baseClassName)\n\n                if (!classGroupId) {\n                    return {\n                        isTailwindClass: false as const,\n                        originalClassName,\n                    }\n                }\n\n                const variantModifier = sortModifiers(modifiers).join(':')\n\n                const modifierId = hasImportantModifier\n                    ? variantModifier + IMPORTANT_MODIFIER\n                    : variantModifier\n\n                return {\n                    isTailwindClass: true as const,\n                    modifierId,\n                    classGroupId,\n                    originalClassName,\n                }\n            })\n            .reverse()\n            // Last class in conflict wins, so we need to filter conflicting classes in reverse order.\n            .filter((parsed) => {\n                if (!parsed.isTailwindClass) {\n                    return true\n                }\n\n                const { modifierId, classGroupId } = parsed\n\n                const classId = modifierId + classGroupId\n\n                if (classGroupsInConflict.has(classId)) {\n                    return false\n                }\n\n                classGroupsInConflict.add(classId)\n\n                getConflictingClassGroupIds(classGroupId).forEach((group) =>\n                    classGroupsInConflict.add(modifierId + group),\n                )\n\n                return true\n            })\n            .reverse()\n            .map((parsed) => parsed.originalClassName)\n            .join(' ')\n    )\n}\n"],"names":["SPLIT_CLASSES_REGEX","mergeClassList","classList","configUtils","splitModifiers","getClassGroupId","getConflictingClassGroupIds","classGroupsInConflict","Set","trim","split","map","originalClassName","modifiers","hasImportantModifier","baseClassName","classGroupId","isTailwindClass","variantModifier","sortModifiers","join","modifierId","IMPORTANT_MODIFIER","reverse","filter","parsed","classId","has","add","forEach","group"],"mappings":";;AAGA,IAAMA,mBAAmB,GAAG,KAA5B,CAAA;AAEgB,SAAAC,cAAA,CAAeC,SAAf,EAAkCC,WAAlC,EAA0D;AACtE,EAAA,IAAQC,cAAR,GAAyED,WAAzE,CAAQC,cAAR;AAAA,MAAwBC,eAAxB,GAAyEF,WAAzE,CAAwBE,eAAxB;AAAA,MAAyCC,2BAAzC,GAAyEH,WAAzE,CAAyCG,2BAAzC,CAAA;AAEA;;;;;;AAMG;;AACH,EAAA,IAAMC,qBAAqB,GAAG,IAAIC,GAAJ,EAA9B,CAAA;AAEA,EAAA,OACIN,SAAS,CACJO,IADL,EAAA,CAEKC,KAFL,CAEWV,mBAFX,CAAA,CAGKW,GAHL,CAGS,UAACC,iBAAD,EAAsB;IACvB,IACIR,eAAAA,GAAAA,cAAc,CAACQ,iBAAD,CADlB;QAAQC,SAAR,mBAAQA,SAAR;QAAmBC,oBAAnB,mBAAmBA,oBAAnB;QAAyCC,aAAzC,mBAAyCA,aAAzC,CAAA;;AAGA,IAAA,IAAMC,YAAY,GAAGX,eAAe,CAACU,aAAD,CAApC,CAAA;;IAEA,IAAI,CAACC,YAAL,EAAmB;MACf,OAAO;AACHC,QAAAA,eAAe,EAAE,KADd;AAEHL,QAAAA,iBAAiB,EAAjBA,iBAAAA;OAFJ,CAAA;AAIH,KAAA;;IAED,IAAMM,eAAe,GAAGC,aAAa,CAACN,SAAD,CAAb,CAAyBO,IAAzB,CAA8B,GAA9B,CAAxB,CAAA;IAEA,IAAMC,UAAU,GAAGP,oBAAoB,GACjCI,eAAe,GAAGI,kBADe,GAEjCJ,eAFN,CAAA;IAIA,OAAO;AACHD,MAAAA,eAAe,EAAE,IADd;AAEHI,MAAAA,UAAU,EAAVA,UAFG;AAGHL,MAAAA,YAAY,EAAZA,YAHG;AAIHJ,MAAAA,iBAAiB,EAAjBA,iBAAAA;KAJJ,CAAA;GAtBR,CAAA,CA6BKW,OA7BL,EA8BI;AA9BJ,GA+BKC,MA/BL,CA+BY,UAACC,MAAD,EAAW;AACf,IAAA,IAAI,CAACA,MAAM,CAACR,eAAZ,EAA6B;AACzB,MAAA,OAAO,IAAP,CAAA;AACH,KAAA;;AAED,IAAA,IAAQI,UAAR,GAAqCI,MAArC,CAAQJ,UAAR;AAAA,QAAoBL,YAApB,GAAqCS,MAArC,CAAoBT,YAApB,CAAA;AAEA,IAAA,IAAMU,OAAO,GAAGL,UAAU,GAAGL,YAA7B,CAAA;;AAEA,IAAA,IAAIT,qBAAqB,CAACoB,GAAtB,CAA0BD,OAA1B,CAAJ,EAAwC;AACpC,MAAA,OAAO,KAAP,CAAA;AACH,KAAA;;IAEDnB,qBAAqB,CAACqB,GAAtB,CAA0BF,OAA1B,CAAA,CAAA;AAEApB,IAAAA,2BAA2B,CAACU,YAAD,CAA3B,CAA0Ca,OAA1C,CAAkD,UAACC,KAAD,EAAA;AAAA,MAAA,OAC9CvB,qBAAqB,CAACqB,GAAtB,CAA0BP,UAAU,GAAGS,KAAvC,CAD8C,CAAA;KAAlD,CAAA,CAAA;AAIA,IAAA,OAAO,IAAP,CAAA;AACH,GAnDL,EAoDKP,OApDL,EAAA,CAqDKZ,GArDL,CAqDS,UAACc,MAAD,EAAA;IAAA,OAAYA,MAAM,CAACb,iBAAnB,CAAA;AAAA,GArDT,CAsDKQ,CAAAA,IAtDL,CAsDU,GAtDV,CADJ,CAAA;AAyDH;;;;"}